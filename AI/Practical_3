def selection_sort(n, arr):
    for i in range(0,n-1):
        min=i
        for j in range(i+1,n):
            if(arr[min]>arr[j]):
                min=j

        temp=arr[min]
        arr[min]=arr[i]
        arr[i]=temp

    for i in range(n):
        print(arr[i],end=" ")

n=int(input("Enter no. of elements in array : "))
arr=[]
print("Enter values of array...")
for i in range(n):
    arr.append(int(input()))

print("Unsorted array....")
for i in range(n):
    print(arr[i],end=" ")

print("\nSorted array....")
selection_sort(n,arr)


////////////////////////////////////////////////////////////


class Graph():
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                      for row in range(vertices)]

    def add_edge(self, u, v, weight):
        u = int(u)
        v = int(v)
        weight = int(weight)
        self.graph[u][v] = weight
        self.graph[v][u] = weight
 
    def printMST(self, parent):
        print("Edge \tWeight")
        for i in range(1, self.V):
            print(parent[i], "-", i, "\t", self.graph[i][parent[i]])

    def minKey(self, key, mstSet):
        min = 999
        min_index=0
        for v in range(self.V):
            if key[v] < min and mstSet[v] == False:
                min = key[v]
                min_index = v

        return min_index
 
    def primMST(self):
        for i in range(self.V):
            for j in range(self.V):
                print(self.graph[i][j], end=" ")
            print()
        key = [999] * self.V
        key[0] = 0
        parent = [-1] * self.V  
        # parent[0] = -1  
        mstSet = [False] * self.V
       
        for i in range(self.V):
            u = self.minKey(key, mstSet)
            mstSet[u] = True
            for v in range(self.V):
                if ((self.graph[u][v] > 0) and (mstSet[v] == False) and (key[v] > self.graph[u][v])):
                    key[v] = self.graph[u][v]
                    parent[v] = u
 
        self.printMST(parent)
 
if __name__ == '__main__':
    # g = Graph(5)
    # g.graph = [[0, 2, 0, 6, 0],
    #            [2, 0, 3, 8, 5],
    #            [0, 3, 0, 0, 7],
    #            [6, 8, 0, 0, 9],
    #            [0, 5, 7, 9, 0]]
 
    # g.primMST()
    
    n = int(input("No. of vertices: "))
    g = Graph(n)
    m = int(input("No. of edges: "))
    for i in range(m):
        a, b, c = input("Enter edge from a to b with w weight (separated by space): ").split()
        g.add_edge(a, b, c)

    g.primMST()
