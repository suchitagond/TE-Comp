def bfs(graph, start):
    visited = set()
    queue=[]
    queue.append(start)
    visited.add(start)
    
    while queue:
        node = queue.pop(0)
        print(node, end=' ')
        
        for neighbor in graph[node]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

def dfs(graph, start):
    visited = set()
    
    def dfs_recursive(node):
        visited.add(node)
        print(node, end=' ')
        
        for neighbor in graph[node]:
            if neighbor not in visited:
                dfs_recursive(neighbor)
    
    dfs_recursive(start)

def create_graph():
    graph = {}
    n = int(input("Enter the number of nodes: "))
    
    for i in range(n):
        node = input(f"Enter node {i+1}: ")
        neighbors = input(f"Enter neighbors of node {node} (separated by space): ").split()
        graph[node] = neighbors
    
    return graph

graph = create_graph()
start_node = input("Enter the starting node for traversal: ")

print("\nBFS traversal:")
bfs(graph, start_node)
print("\nDFS traversal:")
dfs(graph, start_node)
